const canvas=document.querySelector("#neural-network"),context=canvas.getContext("2d");let width,height;const numParticles=110,particleRadius=2,maxDistance=100,lineWidth=.2,particles=[];const resizeCanvas=()=>{width=window.innerWidth,height=window.innerHeight,canvas.width=width,canvas.height=height};const initializeParticles=()=>{for(let i=0;i<numParticles;i++)particles.push({x:Math.random()*width,y:Math.random()*height,vx:Math.random()-.5,vy:Math.random()-.5})};const updateParticles=()=>{for(let i=0;i<numParticles;i++){const particle=particles[i];particle.x+=particle.vx,particle.y+=particle.vy,particle.x<0&&(particle.x+=width),particle.x>width&&(particle.x-=width),particle.y<0&&(particle.y+=height),particle.y>height&&(particle.y-=height)}};const renderParticles=()=>{context.clearRect(0,0,width,height),context.lineWidth=lineWidth;for(let i=0;i<numParticles;i++){const particle=particles[i];for(let j=i+1;j<numParticles;j++){const otherParticle=particles[j],dx=particle.x-otherParticle.x,dy=particle.y-otherParticle.y,distanceSq=dx*dx+dy*dy;if(distanceSq<maxDistance*maxDistance){const alpha=1-distanceSq/(maxDistance*maxDistance);context.strokeStyle=`rgba(255, 255, 255, ${alpha})`,context.beginPath(),context.moveTo(particle.x,particle.y),context.lineTo(otherParticle.x,otherParticle.y),context.stroke()}}context.fillStyle="#fff",context.beginPath(),context.arc(particle.x,particle.y,particleRadius,0,2*Math.PI),context.fill()}};const animate=()=>{updateParticles(),renderParticles(),requestAnimationFrame(animate)};const startAnimation=()=>{resizeCanvas(),initializeParticles(),animate()};const throttle=(callback,delay)=>{let timerId;return()=>{if(timerId)return;timerId=setTimeout(()=>{callback(),timerId=null},delay)}};window.addEventListener("resize",throttle(startAnimation,200)),startAnimation();
